buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'org.ajoberstar:grgit:1.7.2'
    }
}

plugins {
    id 'java'
    id 'idea'
    //id 'org.springframework.boot' version '2.0.5.RELEASE'
}

allprojects {
    idea {
        module {
            outputDir file("$buildDir/classes/main")
            testOutputDir file("$buildDir/classes/test")
        }
    }
}

ext {
    git = org.ajoberstar.grgit.Grgit.open()
    rev = git.head().id
    rev = git.head().getAbbreviatedId(8)
    slf4jVersion = '1.7.25'
    jettyVersion = '9.4.12.v20180830'
    jerseyVersion = '2.27'
    logbackVersion = '1.2.3'
    bouncycastleVersion = '1.60'
    guavaVersion = '26.0-jre'
    jsonsimpleVersion = '1.1.1'
    commonsVersion = '3.6'
    springbootVersion = '2.0.4.RELEASE'
    springVersion = '5.0.8.RELEASE'
    junitVersion = '4.12'
    profile = project.hasProperty('profile') ? project['profile'] : 'local'
}

group 'CryptoService'
version "1.0-${git.head().abbreviatedId}"

sourceCompatibility = 1.8

compileJava {
    options.encoding = "UTF-8"
}

repositories {
    mavenCentral()
}

jar{
    manifest{
        attributes(
                'Main-Class':'com.Start',
                'Implementation-Title' : 'Gradle Build: ' + project.name,
                'Implementation-Version' : project.version,
                'Build-Time' : new Date().format("yyyy-MM-dd HH:mm:ssZ"),
                'Git-Commit' : rev,
                'Git-Branch' : git.branch.current.getName()
        )
    }
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    exclude('META-INF/*.SF')
    exclude('META-INF/*.DSA')
    exclude('META-INF/*.RSA')
}

//tasks.withType(JavaCompile) {
//    options.compilerArgs << '-Xlint:unchecked'
//    options.deprecation = true
//}

sourceSets {
    main {
        java {
            srcDir("src/main")
        }
    }
    test {
        java {
            srcDir("src/test")
        }
    }
}

build {
    finalizedBy = ["CopyRecourse"]
}

task CopyRecourse {
    doFirst {
        copy {
            from 'src/../'
            into 'build/libs'
            include '*.properties'
            include 'setting.json'
        }
    }
}

configurations.all {
//    exclude module: 'slf4j-log4j12'
    exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
}

dependencies {
    compile "org.slf4j:slf4j-api:${slf4jVersion}"

    compile "org.glassfish.jersey.core:jersey-server:${jerseyVersion}"
    
    compile "org.bouncycastle:bcprov-jdk15on:${bouncycastleVersion}"
    compile "com.google.guava:guava:${guavaVersion}"
    compile "com.googlecode.json-simple:json-simple:${jsonsimpleVersion}"
    compile "commons-net:commons-net:${commonsVersion}"

    compile "org.springframework.boot:spring-boot:${springbootVersion}"
    compile("org.springframework.boot:spring-boot-starter-web:${springbootVersion}")
    compile "org.springframework.boot:spring-boot-starter-log4j2:${springbootVersion}"
    testCompile "junit:junit:${junitVersion}"
}
